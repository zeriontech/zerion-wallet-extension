import { createTypedData, serializePaymasterTx } from './createTypedData';

const sample = {
  transaction: {
    from: '0x969F1B5f8b1B9De7157Ee12E96dF3A47130834F9',
    to: '0x6a6394f47dd0baf794808f2749c09bd4ee874e70',
    nonce: '0x0',
    data: '0xa9059cbb0000000000000000000000001b620fae836730584803dd11bca76bc393ba641900000000000000000000000000000000000000000000000000000000000fb770',
    value: '0x0',
    chainId: 543210,
    gasLimit: '0x453f3',
    maxPriorityFeePerGas: '0x0',
    maxFeePerGas: '0x564eba0',
    customData: {
      paymasterParams: {
        paymaster: '0x4667ffb6a24017f977c93da1bd630cf1801343b6',
        paymasterInput:
          '0x8c5a3445000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000674ebb8700000000000000000000000036615cf349d7f6344891b1e7ca7c72883f5dc049000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000417312857f0f0598c9dbfb0ef89cf69c81079b09582003ea4ba58ba888a7d8d0e61a845694b710c8405d9c54308e7f2c49031447d4935299e3913789422fa379db1c00000000000000000000000000000000000000000000000000000000000000',
      },
      gasPerPubdata: '0xc350',
    },
  },
  typedData: {
    types: {
      Transaction: [
        { name: 'txType', type: 'uint256' },
        { name: 'from', type: 'uint256' },
        { name: 'to', type: 'uint256' },
        { name: 'gasLimit', type: 'uint256' },
        { name: 'gasPerPubdataByteLimit', type: 'uint256' },
        { name: 'maxFeePerGas', type: 'uint256' },
        { name: 'maxPriorityFeePerGas', type: 'uint256' },
        { name: 'paymaster', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'value', type: 'uint256' },
        { name: 'data', type: 'bytes' },
        { name: 'factoryDeps', type: 'bytes32[]' },
        { name: 'paymasterInput', type: 'bytes' },
      ],
      EIP712Domain: [
        { name: 'name', type: 'string' },
        { name: 'version', type: 'string' },
        { name: 'chainId', type: 'uint256' },
      ],
    },
    domain: { name: 'zkSync', version: '2', chainId: '543210' },
    primaryType: 'Transaction',
    message: {
      txType: 113,
      from: '0x969F1B5f8b1B9De7157Ee12E96dF3A47130834F9',
      to: '0x6a6394f47dd0baf794808f2749c09bd4ee874e70',
      gasLimit: '0x453f3',
      gasPerPubdataByteLimit: '0xc350',
      maxFeePerGas: '0x564eba0',
      maxPriorityFeePerGas: '0x0',
      paymaster: '0x4667ffb6a24017f977c93da1bd630cf1801343b6',
      nonce: '0x0',
      value: '0x0',
      data: '0xa9059cbb0000000000000000000000001b620fae836730584803dd11bca76bc393ba641900000000000000000000000000000000000000000000000000000000000fb770',
      factoryDeps: [],
      paymasterInput:
        '0x8c5a3445000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000674ebb8700000000000000000000000036615cf349d7f6344891b1e7ca7c72883f5dc049000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000417312857f0f0598c9dbfb0ef89cf69c81079b09582003ea4ba58ba888a7d8d0e61a845694b710c8405d9c54308e7f2c49031447d4935299e3913789422fa379db1c00000000000000000000000000000000000000000000000000000000000000',
    },
  },
};

const signatureSample = {
  transaction: {
    from: '0xE093d671dA3D42fBf79BC333692a7A5f794EdDFb',
    to: '0x6a6394f47dd0baf794808f2749c09bd4ee874e70',
    nonce: '0x0',
    data: '0xa9059cbb0000000000000000000000001b620fae836730584803dd11bca76bc393ba641900000000000000000000000000000000000000000000000000000000000fb770',
    value: '0x0',
    chainId: 543210,
    gasLimit: '0x453f3',
    maxPriorityFeePerGas: '0x0',
    maxFeePerGas: '0x564eba0',
    customData: {
      paymasterParams: {
        paymaster: '0x4667ffb6a24017f977c93da1bd630cf1801343b6',
        paymasterInput:
          '0x8c5a3445000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000674ebb8700000000000000000000000036615cf349d7f6344891b1e7ca7c72883f5dc049000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000417312857f0f0598c9dbfb0ef89cf69c81079b09582003ea4ba58ba888a7d8d0e61a845694b710c8405d9c54308e7f2c49031447d4935299e3913789422fa379db1c00000000000000000000000000000000000000000000000000000000000000',
      },
      gasPerPubdata: '0xc350',
    },
  },
  typedData: {
    types: {
      Transaction: [
        { name: 'txType', type: 'uint256' },
        { name: 'from', type: 'uint256' },
        { name: 'to', type: 'uint256' },
        { name: 'gasLimit', type: 'uint256' },
        { name: 'gasPerPubdataByteLimit', type: 'uint256' },
        { name: 'maxFeePerGas', type: 'uint256' },
        { name: 'maxPriorityFeePerGas', type: 'uint256' },
        { name: 'paymaster', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'value', type: 'uint256' },
        { name: 'data', type: 'bytes' },
        { name: 'factoryDeps', type: 'bytes32[]' },
        { name: 'paymasterInput', type: 'bytes' },
      ],
      EIP712Domain: [
        { name: 'name', type: 'string' },
        { name: 'version', type: 'string' },
        { name: 'chainId', type: 'uint256' },
      ],
    },
    domain: { name: 'zkSync', version: '2', chainId: '543210' },
    primaryType: 'Transaction',
    message: {
      txType: 113,
      from: '0xE093d671dA3D42fBf79BC333692a7A5f794EdDFb',
      to: '0x6a6394f47dd0baf794808f2749c09bd4ee874e70',
      gasLimit: '0x453f3',
      gasPerPubdataByteLimit: '0xc350',
      maxFeePerGas: '0x564eba0',
      maxPriorityFeePerGas: '0x0',
      paymaster: '0x4667ffb6a24017f977c93da1bd630cf1801343b6',
      nonce: '0x0',
      value: '0x0',
      data: '0xa9059cbb0000000000000000000000001b620fae836730584803dd11bca76bc393ba641900000000000000000000000000000000000000000000000000000000000fb770',
      factoryDeps: [],
      paymasterInput:
        '0x8c5a3445000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000674ebb8700000000000000000000000036615cf349d7f6344891b1e7ca7c72883f5dc049000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000417312857f0f0598c9dbfb0ef89cf69c81079b09582003ea4ba58ba888a7d8d0e61a845694b710c8405d9c54308e7f2c49031447d4935299e3913789422fa379db1c00000000000000000000000000000000000000000000000000000000000000',
    },
  },
  signature:
    '0x3f95712ebab7d433d35532e32282785ada5749f28ed4c8b8a535146b7657452e21d22e79cce97c43709ef8d958865696ea6b1a43edc0cf1e517d3a46e23d63341c',
  rawTransaction:
    '0x71f9020c8080840564eba0830453f3946a6394f47dd0baf794808f2749c09bd4ee874e7080b844a9059cbb0000000000000000000000001b620fae836730584803dd11bca76bc393ba641900000000000000000000000000000000000000000000000000000000000fb770830849ea8080830849ea94e093d671da3d42fbf79bc333692a7a5f794eddfb82c350c0b8413f95712ebab7d433d35532e32282785ada5749f28ed4c8b8a535146b7657452e21d22e79cce97c43709ef8d958865696ea6b1a43edc0cf1e517d3a46e23d63341cf9013c944667ffb6a24017f977c93da1bd630cf1801343b6b901248c5a3445000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000674ebb8700000000000000000000000036615cf349d7f6344891b1e7ca7c72883f5dc049000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000417312857f0f0598c9dbfb0ef89cf69c81079b09582003ea4ba58ba888a7d8d0e61a845694b710c8405d9c54308e7f2c49031447d4935299e3913789422fa379db1c00000000000000000000000000000000000000000000000000000000000000',
};

describe('Paymaster tx signing', () => {
  test('Typed data is created correctly', () => {
    const typedData = createTypedData(sample.transaction);
    expect(typedData).toEqual(sample.typedData);
  });
  test('Paymaster tx is signed correctly', () => {
    const typedData = createTypedData(signatureSample.transaction);
    expect(typedData).toEqual(signatureSample.typedData);

    const rawTransaction = serializePaymasterTx({
      transaction: signatureSample.transaction,
      signature: signatureSample.signature,
    });

    expect(rawTransaction).toBe(signatureSample.rawTransaction);
  });
});
